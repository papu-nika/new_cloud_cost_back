package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql/driver"
	"fmt"
)

// OperatingSystem is the 'operating_system' enum type from schema 'public'.
type OperatingSystem uint16

// OperatingSystem values.
const (
	// OperatingSystemLinux is the 'linux' operating_system.
	OperatingSystemLinux OperatingSystem = 1
	// OperatingSystemRhel is the 'rhel' operating_system.
	OperatingSystemRhel OperatingSystem = 2
	// OperatingSystemUbuntuPro is the 'ubuntu_pro' operating_system.
	OperatingSystemUbuntuPro OperatingSystem = 3
	// OperatingSystemWindows is the 'windows' operating_system.
	OperatingSystemWindows OperatingSystem = 4
)

// String satisfies the [fmt.Stringer] interface.
func (os OperatingSystem) String() string {
	switch os {
	case OperatingSystemLinux:
		return "linux"
	case OperatingSystemRhel:
		return "rhel"
	case OperatingSystemUbuntuPro:
		return "ubuntu_pro"
	case OperatingSystemWindows:
		return "windows"
	}
	return fmt.Sprintf("OperatingSystem(%d)", os)
}

// MarshalText marshals [OperatingSystem] into text.
func (os OperatingSystem) MarshalText() ([]byte, error) {
	return []byte(os.String()), nil
}

// UnmarshalText unmarshals [OperatingSystem] from text.
func (os *OperatingSystem) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "linux":
		*os = OperatingSystemLinux
	case "rhel":
		*os = OperatingSystemRhel
	case "ubuntu_pro":
		*os = OperatingSystemUbuntuPro
	case "windows":
		*os = OperatingSystemWindows
	default:
		return ErrInvalidOperatingSystem(str)
	}
	return nil
}

// Value satisfies the [driver.Valuer] interface.
func (os OperatingSystem) Value() (driver.Value, error) {
	return os.String(), nil
}

// Scan satisfies the [sql.Scanner] interface.
func (os *OperatingSystem) Scan(v interface{}) error {
	switch x := v.(type) {
	case []byte:
		return os.UnmarshalText(x)
	case string:
		return os.UnmarshalText([]byte(x))
	}
	return ErrInvalidOperatingSystem(fmt.Sprintf("%T", v))
}

// NullOperatingSystem represents a null 'operating_system' enum for schema 'public'.
type NullOperatingSystem struct {
	OperatingSystem OperatingSystem
	// Valid is true if [OperatingSystem] is not null.
	Valid bool
}

// Value satisfies the [driver.Valuer] interface.
func (nos NullOperatingSystem) Value() (driver.Value, error) {
	if !nos.Valid {
		return nil, nil
	}
	return nos.OperatingSystem.Value()
}

// Scan satisfies the [sql.Scanner] interface.
func (nos *NullOperatingSystem) Scan(v interface{}) error {
	if v == nil {
		nos.OperatingSystem, nos.Valid = 0, false
		return nil
	}
	err := nos.OperatingSystem.Scan(v)
	nos.Valid = err == nil
	return err
}

// ErrInvalidOperatingSystem is the invalid [OperatingSystem] error.
type ErrInvalidOperatingSystem string

// Error satisfies the error interface.
func (err ErrInvalidOperatingSystem) Error() string {
	return fmt.Sprintf("invalid OperatingSystem(%s)", string(err))
}
