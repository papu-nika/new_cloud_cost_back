package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql/driver"
	"fmt"
)

// AwsRegion is the 'aws_region' enum type from schema 'public'.
type AwsRegion uint16

// AwsRegion values.
const (
	// AwsRegionApSouth1 is the 'ap-south-1' aws_region.
	AwsRegionApSouth1 AwsRegion = 1
	// AwsRegionApSouth2 is the 'ap-south-2' aws_region.
	AwsRegionApSouth2 AwsRegion = 2
	// AwsRegionApNortheast1 is the 'ap-northeast-1' aws_region.
	AwsRegionApNortheast1 AwsRegion = 3
	// AwsRegionApNortheast2 is the 'ap-northeast-2' aws_region.
	AwsRegionApNortheast2 AwsRegion = 4
	// AwsRegionApNortheast3 is the 'ap-northeast-3' aws_region.
	AwsRegionApNortheast3 AwsRegion = 5
	// AwsRegionApSoutheast1 is the 'ap-southeast-1' aws_region.
	AwsRegionApSoutheast1 AwsRegion = 6
	// AwsRegionApSoutheast2 is the 'ap-southeast-2' aws_region.
	AwsRegionApSoutheast2 AwsRegion = 7
	// AwsRegionApSoutheast3 is the 'ap-southeast-3' aws_region.
	AwsRegionApSoutheast3 AwsRegion = 8
	// AwsRegionApSoutheast4 is the 'ap-southeast-4' aws_region.
	AwsRegionApSoutheast4 AwsRegion = 9
	// AwsRegionApEast1 is the 'ap-east-1' aws_region.
	AwsRegionApEast1 AwsRegion = 10
	// AwsRegionUsEast1 is the 'us-east-1' aws_region.
	AwsRegionUsEast1 AwsRegion = 11
	// AwsRegionUsEast2 is the 'us-east-2' aws_region.
	AwsRegionUsEast2 AwsRegion = 12
	// AwsRegionUsWest1 is the 'us-west-1' aws_region.
	AwsRegionUsWest1 AwsRegion = 13
	// AwsRegionUsWest2 is the 'us-west-2' aws_region.
	AwsRegionUsWest2 AwsRegion = 14
	// AwsRegionCaCentral1 is the 'ca-central-1' aws_region.
	AwsRegionCaCentral1 AwsRegion = 15
	// AwsRegionCaWest1 is the 'ca-west-1' aws_region.
	AwsRegionCaWest1 AwsRegion = 16
	// AwsRegionUsGovEast1 is the 'us-gov-east-1' aws_region.
	AwsRegionUsGovEast1 AwsRegion = 17
	// AwsRegionUsGovWest1 is the 'us-gov-west-1' aws_region.
	AwsRegionUsGovWest1 AwsRegion = 18
	// AwsRegionSaEast1 is the 'sa-east-1' aws_region.
	AwsRegionSaEast1 AwsRegion = 19
	// AwsRegionEuWest1 is the 'eu-west-1' aws_region.
	AwsRegionEuWest1 AwsRegion = 20
	// AwsRegionEuWest2 is the 'eu-west-2' aws_region.
	AwsRegionEuWest2 AwsRegion = 21
	// AwsRegionEuWest3 is the 'eu-west-3' aws_region.
	AwsRegionEuWest3 AwsRegion = 22
	// AwsRegionEuCentral1 is the 'eu-central-1' aws_region.
	AwsRegionEuCentral1 AwsRegion = 23
	// AwsRegionEuCentral2 is the 'eu-central-2' aws_region.
	AwsRegionEuCentral2 AwsRegion = 24
	// AwsRegionEuNorth1 is the 'eu-north-1' aws_region.
	AwsRegionEuNorth1 AwsRegion = 25
	// AwsRegionEuSouth1 is the 'eu-south-1' aws_region.
	AwsRegionEuSouth1 AwsRegion = 26
	// AwsRegionEuSouth2 is the 'eu-south-2' aws_region.
	AwsRegionEuSouth2 AwsRegion = 27
	// AwsRegionIlCentral1 is the 'il-central-1' aws_region.
	AwsRegionIlCentral1 AwsRegion = 28
	// AwsRegionAfSouth1 is the 'af-south-1' aws_region.
	AwsRegionAfSouth1 AwsRegion = 29
	// AwsRegionMeCentral1 is the 'me-central-1' aws_region.
	AwsRegionMeCentral1 AwsRegion = 30
	// AwsRegionMeSouth1 is the 'me-south-1' aws_region.
	AwsRegionMeSouth1 AwsRegion = 31
)

// String satisfies the [fmt.Stringer] interface.
func (ar AwsRegion) String() string {
	switch ar {
	case AwsRegionApSouth1:
		return "ap-south-1"
	case AwsRegionApSouth2:
		return "ap-south-2"
	case AwsRegionApNortheast1:
		return "ap-northeast-1"
	case AwsRegionApNortheast2:
		return "ap-northeast-2"
	case AwsRegionApNortheast3:
		return "ap-northeast-3"
	case AwsRegionApSoutheast1:
		return "ap-southeast-1"
	case AwsRegionApSoutheast2:
		return "ap-southeast-2"
	case AwsRegionApSoutheast3:
		return "ap-southeast-3"
	case AwsRegionApSoutheast4:
		return "ap-southeast-4"
	case AwsRegionApEast1:
		return "ap-east-1"
	case AwsRegionUsEast1:
		return "us-east-1"
	case AwsRegionUsEast2:
		return "us-east-2"
	case AwsRegionUsWest1:
		return "us-west-1"
	case AwsRegionUsWest2:
		return "us-west-2"
	case AwsRegionCaCentral1:
		return "ca-central-1"
	case AwsRegionCaWest1:
		return "ca-west-1"
	case AwsRegionUsGovEast1:
		return "us-gov-east-1"
	case AwsRegionUsGovWest1:
		return "us-gov-west-1"
	case AwsRegionSaEast1:
		return "sa-east-1"
	case AwsRegionEuWest1:
		return "eu-west-1"
	case AwsRegionEuWest2:
		return "eu-west-2"
	case AwsRegionEuWest3:
		return "eu-west-3"
	case AwsRegionEuCentral1:
		return "eu-central-1"
	case AwsRegionEuCentral2:
		return "eu-central-2"
	case AwsRegionEuNorth1:
		return "eu-north-1"
	case AwsRegionEuSouth1:
		return "eu-south-1"
	case AwsRegionEuSouth2:
		return "eu-south-2"
	case AwsRegionIlCentral1:
		return "il-central-1"
	case AwsRegionAfSouth1:
		return "af-south-1"
	case AwsRegionMeCentral1:
		return "me-central-1"
	case AwsRegionMeSouth1:
		return "me-south-1"
	}
	return fmt.Sprintf("AwsRegion(%d)", ar)
}

// MarshalText marshals [AwsRegion] into text.
func (ar AwsRegion) MarshalText() ([]byte, error) {
	return []byte(ar.String()), nil
}

// UnmarshalText unmarshals [AwsRegion] from text.
func (ar *AwsRegion) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "ap-south-1":
		*ar = AwsRegionApSouth1
	case "ap-south-2":
		*ar = AwsRegionApSouth2
	case "ap-northeast-1":
		*ar = AwsRegionApNortheast1
	case "ap-northeast-2":
		*ar = AwsRegionApNortheast2
	case "ap-northeast-3":
		*ar = AwsRegionApNortheast3
	case "ap-southeast-1":
		*ar = AwsRegionApSoutheast1
	case "ap-southeast-2":
		*ar = AwsRegionApSoutheast2
	case "ap-southeast-3":
		*ar = AwsRegionApSoutheast3
	case "ap-southeast-4":
		*ar = AwsRegionApSoutheast4
	case "ap-east-1":
		*ar = AwsRegionApEast1
	case "us-east-1":
		*ar = AwsRegionUsEast1
	case "us-east-2":
		*ar = AwsRegionUsEast2
	case "us-west-1":
		*ar = AwsRegionUsWest1
	case "us-west-2":
		*ar = AwsRegionUsWest2
	case "ca-central-1":
		*ar = AwsRegionCaCentral1
	case "ca-west-1":
		*ar = AwsRegionCaWest1
	case "us-gov-east-1":
		*ar = AwsRegionUsGovEast1
	case "us-gov-west-1":
		*ar = AwsRegionUsGovWest1
	case "sa-east-1":
		*ar = AwsRegionSaEast1
	case "eu-west-1":
		*ar = AwsRegionEuWest1
	case "eu-west-2":
		*ar = AwsRegionEuWest2
	case "eu-west-3":
		*ar = AwsRegionEuWest3
	case "eu-central-1":
		*ar = AwsRegionEuCentral1
	case "eu-central-2":
		*ar = AwsRegionEuCentral2
	case "eu-north-1":
		*ar = AwsRegionEuNorth1
	case "eu-south-1":
		*ar = AwsRegionEuSouth1
	case "eu-south-2":
		*ar = AwsRegionEuSouth2
	case "il-central-1":
		*ar = AwsRegionIlCentral1
	case "af-south-1":
		*ar = AwsRegionAfSouth1
	case "me-central-1":
		*ar = AwsRegionMeCentral1
	case "me-south-1":
		*ar = AwsRegionMeSouth1
	default:
		return ErrInvalidAwsRegion(str)
	}
	return nil
}

// Value satisfies the [driver.Valuer] interface.
func (ar AwsRegion) Value() (driver.Value, error) {
	return ar.String(), nil
}

// Scan satisfies the [sql.Scanner] interface.
func (ar *AwsRegion) Scan(v interface{}) error {
	switch x := v.(type) {
	case []byte:
		return ar.UnmarshalText(x)
	case string:
		return ar.UnmarshalText([]byte(x))
	}
	return ErrInvalidAwsRegion(fmt.Sprintf("%T", v))
}

// NullAwsRegion represents a null 'aws_region' enum for schema 'public'.
type NullAwsRegion struct {
	AwsRegion AwsRegion
	// Valid is true if [AwsRegion] is not null.
	Valid bool
}

// Value satisfies the [driver.Valuer] interface.
func (nar NullAwsRegion) Value() (driver.Value, error) {
	if !nar.Valid {
		return nil, nil
	}
	return nar.AwsRegion.Value()
}

// Scan satisfies the [sql.Scanner] interface.
func (nar *NullAwsRegion) Scan(v interface{}) error {
	if v == nil {
		nar.AwsRegion, nar.Valid = 0, false
		return nil
	}
	err := nar.AwsRegion.Scan(v)
	nar.Valid = err == nil
	return err
}

// ErrInvalidAwsRegion is the invalid [AwsRegion] error.
type ErrInvalidAwsRegion string

// Error satisfies the error interface.
func (err ErrInvalidAwsRegion) Error() string {
	return fmt.Sprintf("invalid AwsRegion(%s)", string(err))
}
