// Package models contains generated code for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// AwsAuroraServerless represents a row from 'public.aws_aurora_serverlesses'.
type AwsAuroraServerless struct {
	ID                         string         `json:"id" gorm:"column:id"`                                                 // id
	Isauroraiooptimizationmode bool           `json:"isauroraiooptimizationmode" gorm:"column:isauroraiooptimizationmode"` // isauroraiooptimizationmode
	Ondemandprice              StringFloat    `json:"ondemandprice" gorm:"column:ondemandprice"`                           // ondemandprice
	Regioncode                 AwsRegion      `json:"regioncode" gorm:"column:regioncode"`                                 // regioncode
	Databaseengine             DatabaseEngine `json:"databaseengine" gorm:"column:databaseengine"`                         // databaseengine
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [AwsAuroraServerless] exists in the database.
func (aas *AwsAuroraServerless) Exists() bool {
	return aas._exists
}

// Deleted returns true when the [AwsAuroraServerless] has been marked for deletion
// from the database.
func (aas *AwsAuroraServerless) Deleted() bool {
	return aas._deleted
}

// Insert inserts the [AwsAuroraServerless] to the database.
func (aas *AwsAuroraServerless) Insert(ctx context.Context, db DB) error {
	switch {
	case aas._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case aas._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO public.aws_aurora_serverlesses (` +
		`id, isauroraiooptimizationmode, ondemandprice, regioncode, databaseengine` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`)`
	// run
	logf(sqlstr, aas.ID, aas.Isauroraiooptimizationmode, aas.Ondemandprice, aas.Regioncode, aas.Databaseengine)
	if _, err := db.ExecContext(ctx, sqlstr, aas.ID, aas.Isauroraiooptimizationmode, aas.Ondemandprice, aas.Regioncode, aas.Databaseengine); err != nil {
		return logerror(err)
	}
	// set exists
	aas._exists = true
	return nil
}

// Update updates a [AwsAuroraServerless] in the database.
func (aas *AwsAuroraServerless) Update(ctx context.Context, db DB) error {
	switch {
	case !aas._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case aas._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.aws_aurora_serverlesses SET ` +
		`isauroraiooptimizationmode = $1, ondemandprice = $2, regioncode = $3, databaseengine = $4 ` +
		`WHERE id = $5`
	// run
	logf(sqlstr, aas.Isauroraiooptimizationmode, aas.Ondemandprice, aas.Regioncode, aas.Databaseengine, aas.ID)
	if _, err := db.ExecContext(ctx, sqlstr, aas.Isauroraiooptimizationmode, aas.Ondemandprice, aas.Regioncode, aas.Databaseengine, aas.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [AwsAuroraServerless] to the database.
func (aas *AwsAuroraServerless) Save(ctx context.Context, db DB) error {
	if aas.Exists() {
		return aas.Update(ctx, db)
	}
	return aas.Insert(ctx, db)
}

// Upsert performs an upsert for [AwsAuroraServerless].
func (aas *AwsAuroraServerless) Upsert(ctx context.Context, db DB) error {
	switch {
	case aas._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.aws_aurora_serverlesses (` +
		`id, isauroraiooptimizationmode, ondemandprice, regioncode, databaseengine` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`isauroraiooptimizationmode = EXCLUDED.isauroraiooptimizationmode, ondemandprice = EXCLUDED.ondemandprice, regioncode = EXCLUDED.regioncode, databaseengine = EXCLUDED.databaseengine `
	// run
	logf(sqlstr, aas.ID, aas.Isauroraiooptimizationmode, aas.Ondemandprice, aas.Regioncode, aas.Databaseengine)
	if _, err := db.ExecContext(ctx, sqlstr, aas.ID, aas.Isauroraiooptimizationmode, aas.Ondemandprice, aas.Regioncode, aas.Databaseengine); err != nil {
		return logerror(err)
	}
	// set exists
	aas._exists = true
	return nil
}

// Delete deletes the [AwsAuroraServerless] from the database.
func (aas *AwsAuroraServerless) Delete(ctx context.Context, db DB) error {
	switch {
	case !aas._exists: // doesn't exist
		return nil
	case aas._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.aws_aurora_serverlesses ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, aas.ID)
	if _, err := db.ExecContext(ctx, sqlstr, aas.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	aas._deleted = true
	return nil
}

// AwsAuroraServerlessByID retrieves a row from 'public.aws_aurora_serverlesses' as a [AwsAuroraServerless].
//
// Generated from index 'aws_aurora_serverlesses_pkey'.
func AwsAuroraServerlessByID(ctx context.Context, db DB, id string) (*AwsAuroraServerless, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, isauroraiooptimizationmode, ondemandprice, regioncode, databaseengine ` +
		`FROM public.aws_aurora_serverlesses ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	aas := AwsAuroraServerless{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&aas.ID, &aas.Isauroraiooptimizationmode, &aas.Ondemandprice, &aas.Regioncode, &aas.Databaseengine); err != nil {
		return nil, logerror(err)
	}
	return &aas, nil
}
