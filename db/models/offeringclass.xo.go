package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql/driver"
	"fmt"
)

// OfferingClass is the 'offering_class' enum type from schema 'public'.
type OfferingClass uint16

// OfferingClass values.
const (
	// OfferingClassStandard is the 'standard' offering_class.
	OfferingClassStandard OfferingClass = 1
	// OfferingClassConvertible is the 'convertible' offering_class.
	OfferingClassConvertible OfferingClass = 2
)

// String satisfies the [fmt.Stringer] interface.
func (oc OfferingClass) String() string {
	switch oc {
	case OfferingClassStandard:
		return "standard"
	case OfferingClassConvertible:
		return "convertible"
	}
	return fmt.Sprintf("OfferingClass(%d)", oc)
}

// MarshalText marshals [OfferingClass] into text.
func (oc OfferingClass) MarshalText() ([]byte, error) {
	return []byte(oc.String()), nil
}

// UnmarshalText unmarshals [OfferingClass] from text.
func (oc *OfferingClass) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "standard":
		*oc = OfferingClassStandard
	case "convertible":
		*oc = OfferingClassConvertible
	default:
		return ErrInvalidOfferingClass(str)
	}
	return nil
}

// Value satisfies the [driver.Valuer] interface.
func (oc OfferingClass) Value() (driver.Value, error) {
	return oc.String(), nil
}

// Scan satisfies the [sql.Scanner] interface.
func (oc *OfferingClass) Scan(v interface{}) error {
	switch x := v.(type) {
	case []byte:
		return oc.UnmarshalText(x)
	case string:
		return oc.UnmarshalText([]byte(x))
	}
	return ErrInvalidOfferingClass(fmt.Sprintf("%T", v))
}

// NullOfferingClass represents a null 'offering_class' enum for schema 'public'.
type NullOfferingClass struct {
	OfferingClass OfferingClass
	// Valid is true if [OfferingClass] is not null.
	Valid bool
}

// Value satisfies the [driver.Valuer] interface.
func (noc NullOfferingClass) Value() (driver.Value, error) {
	if !noc.Valid {
		return nil, nil
	}
	return noc.OfferingClass.Value()
}

// Scan satisfies the [sql.Scanner] interface.
func (noc *NullOfferingClass) Scan(v interface{}) error {
	if v == nil {
		noc.OfferingClass, noc.Valid = 0, false
		return nil
	}
	err := noc.OfferingClass.Scan(v)
	noc.Valid = err == nil
	return err
}

// ErrInvalidOfferingClass is the invalid [OfferingClass] error.
type ErrInvalidOfferingClass string

// Error satisfies the error interface.
func (err ErrInvalidOfferingClass) Error() string {
	return fmt.Sprintf("invalid OfferingClass(%s)", string(err))
}
