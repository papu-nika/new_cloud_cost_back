package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// AwsEc2NatGateway represents a row from 'public.aws_ec2_nat_gateway'.
type AwsEc2NatGateway struct {
	ID         string          `json:"id" gorm:"column:id"`                 // id
	Regioncode string          `json:"regioncode" gorm:"column:regioncode"` // regioncode
	Price      sql.NullFloat64 `json:"price" gorm:"column:price"`           // price
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [AwsEc2NatGateway] exists in the database.
func (aeg *AwsEc2NatGateway) Exists() bool {
	return aeg._exists
}

// Deleted returns true when the [AwsEc2NatGateway] has been marked for deletion
// from the database.
func (aeg *AwsEc2NatGateway) Deleted() bool {
	return aeg._deleted
}

// Insert inserts the [AwsEc2NatGateway] to the database.
func (aeg *AwsEc2NatGateway) Insert(ctx context.Context, db DB) error {
	switch {
	case aeg._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case aeg._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO public.aws_ec2_nat_gateway (` +
		`id, regioncode, price` +
		`) VALUES (` +
		`$1, $2, $3` +
		`)`
	// run
	logf(sqlstr, aeg.ID, aeg.Regioncode, aeg.Price)
	if _, err := db.ExecContext(ctx, sqlstr, aeg.ID, aeg.Regioncode, aeg.Price); err != nil {
		return logerror(err)
	}
	// set exists
	aeg._exists = true
	return nil
}

// Update updates a [AwsEc2NatGateway] in the database.
func (aeg *AwsEc2NatGateway) Update(ctx context.Context, db DB) error {
	switch {
	case !aeg._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case aeg._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.aws_ec2_nat_gateway SET ` +
		`regioncode = $1, price = $2 ` +
		`WHERE id = $3`
	// run
	logf(sqlstr, aeg.Regioncode, aeg.Price, aeg.ID)
	if _, err := db.ExecContext(ctx, sqlstr, aeg.Regioncode, aeg.Price, aeg.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [AwsEc2NatGateway] to the database.
func (aeg *AwsEc2NatGateway) Save(ctx context.Context, db DB) error {
	if aeg.Exists() {
		return aeg.Update(ctx, db)
	}
	return aeg.Insert(ctx, db)
}

// Upsert performs an upsert for [AwsEc2NatGateway].
func (aeg *AwsEc2NatGateway) Upsert(ctx context.Context, db DB) error {
	switch {
	case aeg._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.aws_ec2_nat_gateway (` +
		`id, regioncode, price` +
		`) VALUES (` +
		`$1, $2, $3` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`regioncode = EXCLUDED.regioncode, price = EXCLUDED.price `
	// run
	logf(sqlstr, aeg.ID, aeg.Regioncode, aeg.Price)
	if _, err := db.ExecContext(ctx, sqlstr, aeg.ID, aeg.Regioncode, aeg.Price); err != nil {
		return logerror(err)
	}
	// set exists
	aeg._exists = true
	return nil
}

// Delete deletes the [AwsEc2NatGateway] from the database.
func (aeg *AwsEc2NatGateway) Delete(ctx context.Context, db DB) error {
	switch {
	case !aeg._exists: // doesn't exist
		return nil
	case aeg._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.aws_ec2_nat_gateway ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, aeg.ID)
	if _, err := db.ExecContext(ctx, sqlstr, aeg.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	aeg._deleted = true
	return nil
}

// AwsEc2NatGatewayByID retrieves a row from 'public.aws_ec2_nat_gateway' as a [AwsEc2NatGateway].
//
// Generated from index 'aws_ec2_nat_gateway_pkey'.
func AwsEc2NatGatewayByID(ctx context.Context, db DB, id string) (*AwsEc2NatGateway, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, regioncode, price ` +
		`FROM public.aws_ec2_nat_gateway ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	aeg := AwsEc2NatGateway{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&aeg.ID, &aeg.Regioncode, &aeg.Price); err != nil {
		return nil, logerror(err)
	}
	return &aeg, nil
}
