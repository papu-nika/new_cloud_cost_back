package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// Session represents a row from 'public.sessions'.
type Session struct {
	ID     string         `json:"id" gorm:"column:id"`           // id
	UserID sql.NullString `json:"user_id" gorm:"column:user_id"` // user_id
	Data   string         `json:"data" gorm:"column:data"`       // data
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Session] exists in the database.
func (s *Session) Exists() bool {
	return s._exists
}

// Deleted returns true when the [Session] has been marked for deletion
// from the database.
func (s *Session) Deleted() bool {
	return s._deleted
}

// Insert inserts the [Session] to the database.
func (s *Session) Insert(ctx context.Context, db DB) error {
	switch {
	case s._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case s._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO public.sessions (` +
		`id, user_id, data` +
		`) VALUES (` +
		`$1, $2, $3` +
		`)`
	// run
	logf(sqlstr, s.ID, s.UserID, s.Data)
	if _, err := db.ExecContext(ctx, sqlstr, s.ID, s.UserID, s.Data); err != nil {
		return logerror(err)
	}
	// set exists
	s._exists = true
	return nil
}

// Update updates a [Session] in the database.
func (s *Session) Update(ctx context.Context, db DB) error {
	switch {
	case !s._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case s._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.sessions SET ` +
		`user_id = $1, data = $2 ` +
		`WHERE id = $3`
	// run
	logf(sqlstr, s.UserID, s.Data, s.ID)
	if _, err := db.ExecContext(ctx, sqlstr, s.UserID, s.Data, s.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Session] to the database.
func (s *Session) Save(ctx context.Context, db DB) error {
	if s.Exists() {
		return s.Update(ctx, db)
	}
	return s.Insert(ctx, db)
}

// Upsert performs an upsert for [Session].
func (s *Session) Upsert(ctx context.Context, db DB) error {
	switch {
	case s._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.sessions (` +
		`id, user_id, data` +
		`) VALUES (` +
		`$1, $2, $3` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`user_id = EXCLUDED.user_id, data = EXCLUDED.data `
	// run
	logf(sqlstr, s.ID, s.UserID, s.Data)
	if _, err := db.ExecContext(ctx, sqlstr, s.ID, s.UserID, s.Data); err != nil {
		return logerror(err)
	}
	// set exists
	s._exists = true
	return nil
}

// Delete deletes the [Session] from the database.
func (s *Session) Delete(ctx context.Context, db DB) error {
	switch {
	case !s._exists: // doesn't exist
		return nil
	case s._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.sessions ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, s.ID)
	if _, err := db.ExecContext(ctx, sqlstr, s.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	s._deleted = true
	return nil
}

// SessionByID retrieves a row from 'public.sessions' as a [Session].
//
// Generated from index 'sessions_pkey'.
func SessionByID(ctx context.Context, db DB, id string) (*Session, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, user_id, data ` +
		`FROM public.sessions ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	s := Session{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&s.ID, &s.UserID, &s.Data); err != nil {
		return nil, logerror(err)
	}
	return &s, nil
}
