package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql/driver"
	"fmt"
)

// PurchaseOption is the 'purchase_option' enum type from schema 'public'.
type PurchaseOption uint16

// PurchaseOption values.
const (
	// PurchaseOptionNoupfront is the 'NoUpfront' purchase_option.
	PurchaseOptionNoupfront PurchaseOption = 1
	// PurchaseOptionPartialupfront is the 'PartialUpfront' purchase_option.
	PurchaseOptionPartialupfront PurchaseOption = 2
	// PurchaseOptionAllupfront is the 'AllUpfront' purchase_option.
	PurchaseOptionAllupfront PurchaseOption = 3
)

// String satisfies the [fmt.Stringer] interface.
func (po PurchaseOption) String() string {
	switch po {
	case PurchaseOptionNoupfront:
		return "NoUpfront"
	case PurchaseOptionPartialupfront:
		return "PartialUpfront"
	case PurchaseOptionAllupfront:
		return "AllUpfront"
	}
	return fmt.Sprintf("PurchaseOption(%d)", po)
}

// MarshalText marshals [PurchaseOption] into text.
func (po PurchaseOption) MarshalText() ([]byte, error) {
	return []byte(po.String()), nil
}

// UnmarshalText unmarshals [PurchaseOption] from text.
func (po *PurchaseOption) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "NoUpfront":
		*po = PurchaseOptionNoupfront
	case "PartialUpfront":
		*po = PurchaseOptionPartialupfront
	case "AllUpfront":
		*po = PurchaseOptionAllupfront
	default:
		return ErrInvalidPurchaseOption(str)
	}
	return nil
}

// Value satisfies the [driver.Valuer] interface.
func (po PurchaseOption) Value() (driver.Value, error) {
	return po.String(), nil
}

// Scan satisfies the [sql.Scanner] interface.
func (po *PurchaseOption) Scan(v interface{}) error {
	switch x := v.(type) {
	case []byte:
		return po.UnmarshalText(x)
	case string:
		return po.UnmarshalText([]byte(x))
	}
	return ErrInvalidPurchaseOption(fmt.Sprintf("%T", v))
}

// NullPurchaseOption represents a null 'purchase_option' enum for schema 'public'.
type NullPurchaseOption struct {
	PurchaseOption PurchaseOption
	// Valid is true if [PurchaseOption] is not null.
	Valid bool
}

// Value satisfies the [driver.Valuer] interface.
func (npo NullPurchaseOption) Value() (driver.Value, error) {
	if !npo.Valid {
		return nil, nil
	}
	return npo.PurchaseOption.Value()
}

// Scan satisfies the [sql.Scanner] interface.
func (npo *NullPurchaseOption) Scan(v interface{}) error {
	if v == nil {
		npo.PurchaseOption, npo.Valid = 0, false
		return nil
	}
	err := npo.PurchaseOption.Scan(v)
	npo.Valid = err == nil
	return err
}

// ErrInvalidPurchaseOption is the invalid [PurchaseOption] error.
type ErrInvalidPurchaseOption string

// Error satisfies the error interface.
func (err ErrInvalidPurchaseOption) Error() string {
	return fmt.Sprintf("invalid PurchaseOption(%s)", string(err))
}
