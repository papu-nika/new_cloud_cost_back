package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// AwsLambda represents a row from 'public.aws_lambdas'.
type AwsLambda struct {
	ID           string          `json:"id" gorm:"column:id"`                     // id
	Regioncode   string          `json:"regioncode" gorm:"column:regioncode"`     // regioncode
	Architecture string          `json:"architecture" gorm:"column:architecture"` // architecture
	Type         LambdaType      `json:"type" gorm:"column:type"`                 // type
	Unit         string          `json:"unit" gorm:"column:unit"`                 // unit
	Price        sql.NullFloat64 `json:"price" gorm:"column:price"`               // price
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [AwsLambda] exists in the database.
func (al *AwsLambda) Exists() bool {
	return al._exists
}

// Deleted returns true when the [AwsLambda] has been marked for deletion
// from the database.
func (al *AwsLambda) Deleted() bool {
	return al._deleted
}

// Insert inserts the [AwsLambda] to the database.
func (al *AwsLambda) Insert(ctx context.Context, db DB) error {
	switch {
	case al._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case al._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO public.aws_lambdas (` +
		`id, regioncode, architecture, type, unit, price` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)`
	// run
	logf(sqlstr, al.ID, al.Regioncode, al.Architecture, al.Type, al.Unit, al.Price)
	if _, err := db.ExecContext(ctx, sqlstr, al.ID, al.Regioncode, al.Architecture, al.Type, al.Unit, al.Price); err != nil {
		return logerror(err)
	}
	// set exists
	al._exists = true
	return nil
}

// Update updates a [AwsLambda] in the database.
func (al *AwsLambda) Update(ctx context.Context, db DB) error {
	switch {
	case !al._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case al._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.aws_lambdas SET ` +
		`regioncode = $1, architecture = $2, type = $3, unit = $4, price = $5 ` +
		`WHERE id = $6`
	// run
	logf(sqlstr, al.Regioncode, al.Architecture, al.Type, al.Unit, al.Price, al.ID)
	if _, err := db.ExecContext(ctx, sqlstr, al.Regioncode, al.Architecture, al.Type, al.Unit, al.Price, al.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [AwsLambda] to the database.
func (al *AwsLambda) Save(ctx context.Context, db DB) error {
	if al.Exists() {
		return al.Update(ctx, db)
	}
	return al.Insert(ctx, db)
}

// Upsert performs an upsert for [AwsLambda].
func (al *AwsLambda) Upsert(ctx context.Context, db DB) error {
	switch {
	case al._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.aws_lambdas (` +
		`id, regioncode, architecture, type, unit, price` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`regioncode = EXCLUDED.regioncode, architecture = EXCLUDED.architecture, type = EXCLUDED.type, unit = EXCLUDED.unit, price = EXCLUDED.price `
	// run
	logf(sqlstr, al.ID, al.Regioncode, al.Architecture, al.Type, al.Unit, al.Price)
	if _, err := db.ExecContext(ctx, sqlstr, al.ID, al.Regioncode, al.Architecture, al.Type, al.Unit, al.Price); err != nil {
		return logerror(err)
	}
	// set exists
	al._exists = true
	return nil
}

// Delete deletes the [AwsLambda] from the database.
func (al *AwsLambda) Delete(ctx context.Context, db DB) error {
	switch {
	case !al._exists: // doesn't exist
		return nil
	case al._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.aws_lambdas ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, al.ID)
	if _, err := db.ExecContext(ctx, sqlstr, al.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	al._deleted = true
	return nil
}

// AwsLambdaByID retrieves a row from 'public.aws_lambdas' as a [AwsLambda].
//
// Generated from index 'aws_lambdas_pkey'.
func AwsLambdaByID(ctx context.Context, db DB, id string) (*AwsLambda, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, regioncode, architecture, type, unit, price ` +
		`FROM public.aws_lambdas ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	al := AwsLambda{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&al.ID, &al.Regioncode, &al.Architecture, &al.Type, &al.Unit, &al.Price); err != nil {
		return nil, logerror(err)
	}
	return &al, nil
}
