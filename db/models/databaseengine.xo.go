package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql/driver"
	"fmt"
)

// DatabaseEngine is the 'database_engine' enum type from schema 'public'.
type DatabaseEngine uint16

// DatabaseEngine values.
const (
	// DatabaseEngineAuroraMysql is the 'aurora-mysql' database_engine.
	DatabaseEngineAuroraMysql DatabaseEngine = 1
	// DatabaseEngineAuroraPostgresql is the 'aurora-postgresql' database_engine.
	DatabaseEngineAuroraPostgresql DatabaseEngine = 2
	// DatabaseEngineMysql is the 'mysql' database_engine.
	DatabaseEngineMysql DatabaseEngine = 3
	// DatabaseEnginePostgresql is the 'postgresql' database_engine.
	DatabaseEnginePostgresql DatabaseEngine = 4
)

// String satisfies the [fmt.Stringer] interface.
func (de DatabaseEngine) String() string {
	switch de {
	case DatabaseEngineAuroraMysql:
		return "aurora-mysql"
	case DatabaseEngineAuroraPostgresql:
		return "aurora-postgresql"
	case DatabaseEngineMysql:
		return "mysql"
	case DatabaseEnginePostgresql:
		return "postgresql"
	}
	return fmt.Sprintf("DatabaseEngine(%d)", de)
}

// MarshalText marshals [DatabaseEngine] into text.
func (de DatabaseEngine) MarshalText() ([]byte, error) {
	return []byte(de.String()), nil
}

// UnmarshalText unmarshals [DatabaseEngine] from text.
func (de *DatabaseEngine) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "aurora-mysql":
		*de = DatabaseEngineAuroraMysql
	case "aurora-postgresql":
		*de = DatabaseEngineAuroraPostgresql
	case "mysql":
		*de = DatabaseEngineMysql
	case "postgresql":
		*de = DatabaseEnginePostgresql
	default:
		return ErrInvalidDatabaseEngine(str)
	}
	return nil
}

// Value satisfies the [driver.Valuer] interface.
func (de DatabaseEngine) Value() (driver.Value, error) {
	return de.String(), nil
}

// Scan satisfies the [sql.Scanner] interface.
func (de *DatabaseEngine) Scan(v interface{}) error {
	switch x := v.(type) {
	case []byte:
		return de.UnmarshalText(x)
	case string:
		return de.UnmarshalText([]byte(x))
	}
	return ErrInvalidDatabaseEngine(fmt.Sprintf("%T", v))
}

// NullDatabaseEngine represents a null 'database_engine' enum for schema 'public'.
type NullDatabaseEngine struct {
	DatabaseEngine DatabaseEngine
	// Valid is true if [DatabaseEngine] is not null.
	Valid bool
}

// Value satisfies the [driver.Valuer] interface.
func (nde NullDatabaseEngine) Value() (driver.Value, error) {
	if !nde.Valid {
		return nil, nil
	}
	return nde.DatabaseEngine.Value()
}

// Scan satisfies the [sql.Scanner] interface.
func (nde *NullDatabaseEngine) Scan(v interface{}) error {
	if v == nil {
		nde.DatabaseEngine, nde.Valid = 0, false
		return nil
	}
	err := nde.DatabaseEngine.Scan(v)
	nde.Valid = err == nil
	return err
}

// ErrInvalidDatabaseEngine is the invalid [DatabaseEngine] error.
type ErrInvalidDatabaseEngine string

// Error satisfies the error interface.
func (err ErrInvalidDatabaseEngine) Error() string {
	return fmt.Sprintf("invalid DatabaseEngine(%s)", string(err))
}
